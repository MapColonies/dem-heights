
{{- $chartName := include "heights.name" . -}}
{{- $serviceName := include "service.fullname" . -}}
{{- $releaseName := .Release.Name -}}

upstream heights {
    server {{ $serviceName }}:{{ .Values.env.port }};
}

server {
    listen      {{ .Values.env.port }};
    # the domain name it will serve for
    server_name heights;

    proxy_request_buffering off; # upstream server can hanle large streaming uploads
    proxy_http_version 1.1; # required to disable request buffering also for clients that send chunked encoding
    client_max_body_size 0; # otherwise nginx imposes a size restriction; only upstream should decide that

    # max upload size, adjust to taste
    # keepalive_timeout           500;
    # proxy_connect_timeout       600;
    # proxy_send_timeout          600;
    # send_timeout                600;
    # client_max_body_size        5000;
    # client_header_timeout       600;
    # client_body_timeout         600;
    # client_header_buffer_size   5M;
    # large_client_header_buffers 4 12288; # 12K
    # fastcgi_read_timeout        300;

    # OpenShift route is configured to time out HTTP requests that are longer than 30 seconds:
    # route.yaml -> annotations: -> haproxy.router.openshift.io/timeout: 30s
    # The following value MUST be smaller to avoid unwanted behaviour (timeout with status code 200)
    # Calculation: average (without cache) multiplied by "factor" which should correlates with response time while high load
    proxy_read_timeout          3s;

    location /liveness {
        access_log  off;
        return 200;
    }

    location / {
        proxy_hide_header Set-Cookie;  # ensures the header will not be passed back to the client
        proxy_ignore_headers Set-Cookie;  # ensures that the header will not automatically disable caching within nginx
        proxy_set_header  Cookie ""; # ensures that a client cannot pass any prior cookies to the webapp and spoil your cache
        proxy_set_header  X-Client-Id $jwt_payload_sub;
        proxy_pass        http://heights;
    }
}
